import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.Random;
 
 
public class Transformations
{
 
 
	public static BufferedImage noise(BufferedImage img, int quantity, int threshold) {
		BufferedImage dest = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
 
		//good values are
		//quantity = 10;
		//threshold = 50;
		Random r = new Random();
 
		for (int x = 0; x < img.getWidth(); x++) {
			for (int y = 0; y < img.getHeight(); y++) {
				int px = img.getRGB(x, y);
 
				int ran = r.nextInt(quantity);
				if (ran <= 1) {
 
					int amount = r.nextInt(threshold);
					int red = ((px >> 16) & 0xFF) + amount;
 
					amount = r.nextInt(threshold);
					int green = ((px >> 8) & 0xFF) + amount;	
 
					amount = r.nextInt(threshold);			
					int blue = (px & 0xFF) + amount;
 
					//Overflow fix
					if (red > 255) { red = 255; }
					if (green > 255) { green = 255; }
					if (blue > 255) { blue = 255; }
 
					px = (0xFF<<24) + (red<<16) + (green<<8) + blue;
				}
 
				dest.setRGB(x, y, px);
			}
		}
 
		return dest;
	}
 
	public static BufferedImage invert(BufferedImage img) {
		BufferedImage dest = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
 
		for (int x = 0; x < img.getWidth(); x++) {
			for (int y = 0; y < img.getHeight(); y++) {
				int px = img.getRGB(x, y);
 
				//Subtracting the channels value from 0xFF effectively inverts it
				int red = 0xFF - ((px >> 16) & 0xFF);
				int green = 0xFF - ((px >> 8) & 0xFF);
				int blue = 0xFF - (px & 0xFF);
 
				int inverted = (0xFF<<24) + (red<<16) + (green<<8) + blue;
				dest.setRGB(x, y, inverted);
			}
		}
 
		return dest;
	}
 
 
 
	public static BufferedImage greyScale(BufferedImage img) {
		BufferedImage dest = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
 
		for (int x = 0; x < img.getWidth(); x++) {
			for (int y = 0; y < img.getHeight(); y++) {
 
				int px = img.getRGB(x, y);
 
				int alpha = (px >> 24) & 0xFF;
				int red = (px >> 16) & 0xFF;
				int green = (px >> 8) & 0xFF;
				int blue = px & 0xFF;
 
				//average of RGB
				int avg = (red + blue + green) / 3;
 
				//set R, G & B with avg color
				int grey = (alpha<<24) + (avg<<16) + (avg<<8) + avg;
 
				dest.setRGB(x, y, grey);
			}
		}
 
		return dest;
	}
 
 
	public static BufferedImage burn(BufferedImage img) {
		BufferedImage dest = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
 
		for (int x = 0; x < img.getWidth(); x++) {
			for (int y = 0; y < img.getHeight(); y++) {
				int px = img.getRGB(x, y);
 
				int burn = px << 8; //this was a lucky guess. not sure why it works
 
				dest.setRGB(x, y, burn);
			}
		}
 
		return dest;
	}
	
 
	public static BufferedImage flipVertical(BufferedImage img) {
		BufferedImage dest = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
 
		//Flip vertical and horizontal
		for (int x = 0; x < img.getWidth(); x++) {
			for (int y = 0; y < img.getHeight(); y++) {
				int px = img.getRGB(x, y);
				dest.setRGB(x, img.getHeight() - y - 1, px);			
			}
		}
 
		return dest;
	} 

	public static BufferedImage scaleImage(BufferedImage img, float scale) {
		int w = (int)(img.getWidth()*scale);
		int h = (int)(img.getHeight()*scale);
		int s_x, s_y;
		
		BufferedImage dest = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
 
		// 최근접이웃 방법
		for (int x = 0; x < w; x++) {
			s_x = (int) (x / scale);
			for (int y = 0; y < h; y++) {			
				s_y = (int) (y / scale);
				int px = img.getRGB(s_x, s_y);
				dest.setRGB(x, y, px);			
			}
		}
 
		return dest;
	} 
	
}
